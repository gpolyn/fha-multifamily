= stylesheet_link_tag "todos"
= stylesheet_link_tag "income_tables"
= javascript_include_tag "application"

.column
	= render :partial => "shared/inner_page_title", :locals=>{:title=>"FHA Sec. 223(f) refinance/purchase demo"}
	#todoapp
		/ .title
		/ 	%h1 FHA: Sec. 223(f) refinance/purchase
		.content
			#income
				%table#apartment-income
					%caption.income-table
						apartment income
					%colgroup
						%col#apartment-bedroom-count
						%col#apartment-unit-count
						%col#apartment-square-feet.square-footage
						%col#apartment-monthly-rent.monthly-income
						%col#destroy
					%thead
						%tr
							%th
								bedrooms<span class="required">*</span>
							%th
								units<span class="required">*</span>
							%th
								square feet
							%th
								monthly rent<span class="required">*</span>
							%th
					%tbody
						%tr#new-apartment-income
							%td
								%select.apartment-bedroom-count
									- (0..4).each do |i|
										%option{:value=>"#{i}"}=i
							%td
								%input.apartment-unit-count
							%td
								%input.apartment-square-feet
							%td
								%input.apartment-monthly-rent
							%td
								.add
									<span class="add-apartment-income add-item"></span>
				%table#other-residential-income
					%caption.income-table
						other residential income
					%colgroup
						%col#other-residential-use
						%col#other-residential-square-feet.square-footage
						%col#other-residential-monthly-rent.monthly-income
						%col#destroy
					%thead
						%tr
							%th
								usage
							%th
								square feet
							%th
								monthly rent<span class="required">*</span>
							%th
					%tbody
						%tr#new-other-income
							%td
								%input.other-residential-use.usage
							%td
								%input.other-residential-square-feet
							%td
								%input.other-residential-monthly-rent
							%td
								.add
									<span class="add-other-income add-item"></span>
				%table#commercial-income
					%caption.income-table
						commercial income
					%colgroup
						%col#commercial-use
						%col#commercial-square-feet.square-footage
						%col#commercial-monthly-rent.monthly-income
						%col#destroy
					%thead
						%tr
							%th
								usage
							%th
								square feet
							%th
								monthly rent<span class="required">*</span>
							%th
					%tbody
						%tr#new-commercial-income
							%td
								%input.commercial-use.usage
							%td
								%input.commercial-square-feet
							%td
								%input.commercial-monthly-rent
							%td
								.add
									<span class="add-commercial-income add-item"></span>
				%table#residential-parking-income.parking
					%caption.income-table
						residential parking income
					%colgroup
						%col#residential-parking-spaces
						%col#residential-parking-indoor-or-outdoor
						%col#residential-parking-total-square-feet.square-footage
						%col#residential-parking-monthly-fee.monthly-income
						%col#destroy
					%thead
						%tr
							%th
								spaces<span class="required">*</span>
							%th
					
							%th
								total square feet
							%th
								monthly fee<span class="required">*</span>
							%th
					%tbody
						%tr#new-residential-parking-income
							%td
								%input.residential-parking-spaces
							%td
								%select.residential-parking-type
									- ['indoor', 'outdoor'].each do |i|
										%option{:value=>"#{i}"}=i
							%td
								%input.residential-parking-square-feet
							%td
								%input.residential-parking-monthly-fee
							%td
								.add
									<span class="add-residential-parking-income add-item"></a>
				%table#commercial-parking-income.parking
					%caption.income-table
						commercial parking income
					%colgroup
						%col#commercial-parking-spaces
						%col#commercial-parking-indoor-or-outdoor
						%col#commercial-parking-total-square-feet.square-footage
						%col#commercial-parking-monthly-fee.monthly-income
						%col#destroy
					%thead
						%tr
							%th
								spaces<span class="required">*</span>
							%th
					
							%th
								total square feet
							%th
								monthly fee<span class="required">*</span>
							%th
					%tbody
						%tr#new-commercial-parking-income
							%td
								%input.commercial-parking-spaces
							%td
								%select.commercial-parking-type
									- ['indoor', 'outdoor'].each do |i|
										%option{:value=>"#{i}"}=i
							%td
								%input.commercial-parking-square-feet
							%td
								%input.commercial-parking-monthly-fee
							%td
								.add
									<span class="add-commercial-parking-income add-item"></a>
			#acquisition-costs
			#gif
				#fetching
			#loan-results

:coffeescript
	$ ->
		# Feature detect + local reference
		storage = (
			() ->
				try
					uid = "sizemymultifamilyloan.com.localStorage_test"
					localStorage.setItem uid, uid
					successfullyPersisted = localStorage.getItem(uid) is uid
					
					if successfullyPersisted is true
						localStorage.removeItem(uid)
						true
					else
						false
				catch e
		)() and localStorage
		
		TodoApp.appView = new TodoApp.AppView collection: new TodoApp.TodoList
		TodoApp.Collections.apartmentIncomes = new TodoApp.ApartmentIncomes
		TodoApp.Views.aptIncomeView = new TodoApp.ApartmentIncomesView collection: TodoApp.Collections.apartmentIncomes
		TodoApp.Collections.commercialParkingIncomes = new TodoApp.CommercialParkingIncomes
		TodoApp.Views.commPking = new TodoApp.CommercialParkingIncomesView collection: TodoApp.Collections.commercialParkingIncomes
		TodoApp.Collections.residentialParkingIncomes = new TodoApp.ResidentialParkingIncomes
		TodoApp.residentialParking = new TodoApp.ResidentialParkingIncomesView collection: TodoApp.Collections.residentialParkingIncomes
		TodoApp.Collections.otherResidentialIncomes = new TodoApp.OtherResidentialIncomes
		TodoApp.otherResidentialIncomes = new TodoApp.OtherResidentialIncomesView collection: TodoApp.Collections.otherResidentialIncomes
		TodoApp.Collections.commercialIncomes = new TodoApp.CommercialIncomes
		TodoApp.commercialIncomes = new TodoApp.CommercialIncomesView collection: TodoApp.Collections.commercialIncomes
		
		if (opex = new Store("operatingExpense").findAll()[0])
			opexAttrs =
				id:									  opex.id
				total:                                opex.total
				totalIsPercentOfEffectiveGrossIncome: opex.totalIsPercentOfEffectiveGrossIncome
			TodoApp.opex = new TodoApp.OperatingExpense opexAttrs
		else
			TodoApp.opex = new TodoApp.OperatingExpense # blank initialization!
		
		attrs = _.clone(TodoApp.Collections)
		
		# stupid workaround...
		operatingIncomeStore = new Store("operatingIncome")
		item = operatingIncomeStore.findAll()[operatingIncomeStore.findAll().length - 1]
		if item?
			attrs.id = item.id
			attrs.commercialOccupancyPercent = item.commercialOccupancyPercent
			attrs.residentialOccupancyPercent = item.residentialOccupancyPercent
		
		TodoApp.Models.affordability = TodoApp.Affordability.getInstance()
		attrs.affordability = TodoApp.Models.affordability
		
		TodoApp.operatingIncome = new TodoApp.Sec223fMultifamilyOperatingIncome attrs
		TodoApp.operatingIncomeView = new TodoApp.OperatingIncomeView model: TodoApp.operatingIncome
		opAttrs = {operatingIncome: TodoApp.operatingIncome, operatingExpense: TodoApp.opex}
		TodoApp.operatingExpense = new TodoApp.OperatingExpenseView model: TodoApp.opex
		TodoApp.Models.operating = new TodoApp.Operating opAttrs
		TodoApp.Views.operating = new TodoApp.OperatingView model: TodoApp.Models.operating
		
		window.deleteSingletonModels = (modelName) ->
			items = localStorage[modelName].split(',')
			for ele in items
				localStorage.removeItem(modelName + "-" +ele)
			localStorage.removeItem(modelName)
		
		TodoApp.Models.metropolitanArea = TodoApp.MetropolitanArea.getInstance()
		TodoApp.Views.metropolitanArea = new TodoApp.MetropolitanAreaView model: TodoApp.Models.metropolitanArea
		TodoApp.Views.affordability = new TodoApp.AffordabilityView model: TodoApp.Models.affordability
		TodoApp.Models.elevatorStatus = TodoApp.ElevatorStatus.getInstance()
		TodoApp.Views.elevatorStatus = new TodoApp.ElevatorStatusView model: TodoApp.Models.elevatorStatus
		
		TodoApp.Models.loanCosts = TodoApp.Sec223fAcquisitionCosts.getInstance()
		TodoApp.Views.loanCostView = new TodoApp.Sec223fCostsView model: TodoApp.Models.loanCosts
		
		TodoApp.Models.loanSubmission = TodoApp.LoanSubmission.getInstance()
		
		TodoApp.Collections.criteria = new TodoApp.LoanCriteria
		attrs =
			operating:        TodoApp.Models.operating
			affordability:    TodoApp.Models.affordability
			metropolitanArea: TodoApp.Models.metropolitanArea
			criteria:         TodoApp.Collections.criteria
			loanCosts:        TodoApp.Models.loanCosts
			elevatorStatus:   TodoApp.Models.elevatorStatus
			loanSubmission:   TodoApp.Models.loanSubmission
		TodoApp.Models.loanService = new TodoApp.LoanService attrs
		TodoApp.Views.loanServiceView = new TodoApp.LoanServiceView model: TodoApp.Models.loanService
		
		attrs = {collection: TodoApp.Collections.criteria, loanService : TodoApp.Models.loanService}
		
		TodoApp.Views.criteria = new TodoApp.CriteriaView attrs
		
		removeLoanDetails = () ->
			TodoApp.Models.loanService.deleteLoanAmountAndCashRequirementFromLocalStorage()
			TodoApp.Collections.criteria.destroyAll()
		
		eles = "div#income input, div#acquisition-costs input:not(#api-key), div#elevator-status select, div#metropolitan-area select"
		
		$(eles).change () ->
			removeLoanDetails()
		
		# stupid hack!
		TodoApp.Models.affordability.bind "change", () ->
			TodoApp.Views.criteria.removeCurrent()
			removeLoanDetails()


= render :partial => "templates/item_template"
= render :partial => "templates/stats_template"
= render :partial => "templates/apartment_income_source_template"
= render :partial => "templates/parking_income_source_template"
= render :partial => "templates/simple_income_source_template"
= render :partial => "templates/operating_expense_template"
= render :partial => "templates/operating_income_template"
= render :partial => "templates/sec223f_acquisition_costs_template"
= render :partial => "templates/affordability"
= render :partial => "templates/metropolitan_area"
= render :partial => "templates/loan_criterion"
= render :partial => "templates/criteria"
= render :partial => "templates/loan_service"